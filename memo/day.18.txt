day18(java 16일차)
API -> Object 클래스 -> Wrapper 클래스 -> 컬렉션 프레임워크

1. API(Application Programming Interface)
   응용 프로그래밍 인터페이스

   내부 API
      JDK(JRE, JVM) 설치 시 제공해주는 기본 api
      자바로 어플리케이션을 쉽게 구현할 수 있도록 한 라이브러리 집합
      https://docs.oracle.com/en/java/javase/17/docs/api/index.html
   외부 API
      다른 개발자들이 개발한 패키지 및 클래스들을 의미한다
      보통 jar 파일로 배포하며 자바 프로젝트에 build path에 추가하여 사용할 수 있다

1) API 공식문서 확인
   - 전체 상속관계를 보려면 상속 계층도를 보면된다
   - API 도큐먼트에서 String 클래스가 어떻게 정의되어있는지는 아래쪽에 있는 선언부를 보면 된다
      클래스가 final인지 추상클래스인지 알 수 있고, 부모 클래스나 구현 인터페이스도 볼 수 있다
   - 구성 멤버는 상단 메뉴 SUMMARY를 보면된다
      멤버별 링크를 제공하는데 링크가 있으면 public, protected 공개된 멤버가 있다는 뜻이고
      링크가 없다면 공개된 멤버가 없다는 뜻이다

2) 모듈, 패키지, 라이브러리
- 모듈(Module)
   jdk9부터 도입된 모듈 시스템
   코드를 논리적으로 그룹화하고 모듈간의 의존성을 관리하는 방법을 제공한다
   모듈은 패키지와 라이브러리의 개념을 확장하고 런타임에서 모듈의 논리적인 단위로 코드를 로드하고 관리할 수 있다
   코드의 의존성을 더욱 명확하게 정의하고 런타임 모듈 시스템을 통해 더 격리된 환경을 제공한다

- 패키지(Package)
   관련된 클래스 및 인터페이스를 그룹화하는 방법을 제공한다
   패키지는 디렉터리 구조와 일치하고 패키지 내의 클래스들은 동일한 패키지 이름 공간안에 있어야한다
   코드를 구조화하고 이름 충돌을 방지하는데 도움을 준다

- 라이브러리(Library)
   jar(Java Archive) 압축파일 형태로 존재한다
   jar 파일에는 클래스와 인터페이스의 바이트코드 파일(.class) 파일들이 압축되어있다

   재사용 가능한 코드 집합
   특정 작업 또는 기능을 수행하기 위해 다른 프로그램에서 사용할 수 있게 해준다

3) 외부 API
   JAR 파일로 만든다
   Java Archive : java 클래스 파일, 리소스파일 및 메타 데이터를 포함하는 아카이브 파일

- jar 파일 생성
   java 어플리케이션을 개발한 모든 파일들을 Jar파일로 패키징

- jar 파일 배포
   jar 파일을 웹사이트, FTP 서버, 클라우드 저장소 등에 업로드 하여 배포 가능

파일 배포
   배포할 프로젝트 마우스 우클릭 > Export > JAVA/JAR file 선택 > Next
   > Destination 원하는 경로 선택 > Export Java Source Files .. 체크(API 주석 포함하겠다)
   > Finish

외부 API 추가(Build Path에 추가)
   배포된 jar 파일 다운로드 > 프로젝트 우클릭 > Build Path > Configure Build Path
   > Libraries 탭 클릭 > Add External JARs 클릭 > 저장된 경로의 .jar파일 더블 클릭으로 추가 > Apply 클릭
   > Orders and Exports 탭 클릭 > Select All 클릭 > Apply and Close 클릭

- jar 파일 실행
   jar 파일을 실행하려면 Java Runtime Environment(jre)가 필요하다
   java -jar [jar 파일명]


4) API 주석
	/**
	*/
	
	API를 작성한 사람이 사용하는 사람이 알기 쉽도록 주석을 통해 알려줘야한다
	
	@param 	매개변수
	@return 반환값
	@throws 예외처리
	@author 개발자명, 팀명
	@since 	jdk버전
	@see   	설명(다른 클래스들을 활용할 수 있는 경우 클래스명을 작성한다)
	<p> 문단태그, <br>줄바꿈태그	

java doc
	https://www.oracle.com/kr/technical-resources/articles/java/javadoc-tool.html

2. Object 클래스
	
	java.lang	- Object 클래스		모든 클래스의 최상위 부모 클래스
			- System 클래스 		키보드로부터 데이터를 입력받을 때 사용
						모니터(콘솔)로 출력하기 위해 사용
			- 문자열 관련
			String 클래스		문자열을 저장하고 조작할 때 사용
			StringBuilder		효율적인 문자열 조작 기능이 필요할 때 사용
			java.util.StringTokenizer	구분자로 연결된 문자열을 분리할 때 사용

			- 포장관련(Warpper)	기본타입의 값을 포장할 때 사용, 문자열을 기본타입으로 변환시 사용
			Byte, Short, Interger, Character, Float, Double, Boolean
			- Math			수학계산이 필요할 때 사용
			- Class			클래스의 메타 정보(이름, 구성맴버)등 조사할 때 사용
1) Object 클래스의 메소드

	메소드	 			용도
	boolean eqals(Object obj)	객체의 번지를 비교하고 결과를 리턴
	int hashCode()			객체의 해시코드를 리턴
	String toStirng()		객체의 문저 정보 리턴	

2) toString() 메소드
	참조값을 문자열 형태로 출력한다
	클래스경로와이름@16진수로변환된(해쉬코드)
			toHexString(hashCode()) => 해시값, 16진수로 변환된(해시코드 값)
	참조변수를 출력메소드로 출력하면 항상 toString()이 사용된다 => 참조값
	toString 재정의를 통해 출력되는 문자열의 형태를 바꾸면 된다

	객체 => 결과
	객체명.toString => 결과
	
3) equals() 메소드
	Object의 equals()는 사실 관계연산자(==)와 같다
	(주소값 비교)String의 eqals()는 재정의되어 값을 비교한다
	객체를 비교하고 싶다면, 비교기준을 재정의 해서 사용할 수 있다
	
4) hashCode() 메소드
   객체 해시코드 : 객체를 식별하는 정수를 의미
   Object의 hashCode() 메소드는 객체의 메모리 번지를 이용해서 해시코드를 생성하기 때문에 객체마다 다른 정수값을 리턴
   eqauls() 메소드와 마찬가지로 hashCode()메소드 역시 객체의 데이터를 기준으로 재정의해서 
   새로운 정수값을 리턴하도록 하는 것이 일반적이다
   객체가 다르다 할지라도 내부 데이터가 동일하다면 같은 정수값을 리턴하기 위함이다
   자바는 두 객체가 동등함을 비교할 때 hashCode()와 equals()메소드를 같이 사용하는 경우가 많다

3. Wrapper 클래스 
	기본 자료형들의 클래스 타입
	
	기본타입(원시타입)				wrapper클래스(참조형타입)
	short					Short
	byte					Byte
	int					Integer
	long					Long
	double					Double
	float					Float
	boolean					Boolean
	char					Character


Q. 메모리를 더 많이 차지하는 Wrapper 클래스는 언제 사용될까?
	기본형이 객체로 취급되어야하는 경우들이 있는데  이 때 Wrapper Class를 사용한다
	- 매개변수로 객체가 요구될 때
	- 기본형 값이 아닌 객체로 저장해야할 때
	- 객체간의 비교가 필요할 때
	
	int num = 100;
	double avg = 89.3;
	boolean = true;
	char grade = 'A';


	기본형 			참조형
	모두 첫글자가 소문자		모두 첫글자가 대문자
	null로 초기화 불가능 	null로 초기화 가능	
	
1) 박싱과 언박싱
	기본타입의 값을 포장객체로 만드는 과정을 박싱(boxing)이라고 하고
	포장 객체에서 기본 타입의 값을 얻어내는 과정을 언박싱(unboxing)이라고 한다

2) boxing
- 예전방법
	클래스타입 객체 = new클래스타입(일반타입의 값);
- 최근방법
	클래스타입 참조변수 = 클래스타입.valueOf(일반타입의 값);
- 자동boxing
	클래스타입 침저뱐스 = 일반타입의 값;

3) unboxing
	일반타입 변수 = 참조변수.000Value();

- 자동 unboxing
	일반타입 변수 = 참조변수;

4) Wrapper class 사용하는 이유
	원시타입(일반타입)을 박싱하면 다양한 메소드를 제공받을 수 있다
	여러 일반타입을 하나의 타입으로 묶기 위해서는 반드시 클래스타입(Wrapper class)으로 사용해야하고
	이 때 박싱 해줘야한다

4. String 메소드
	charAt()	문자열에서 해당 인덱스 번호의 문자를 char타입으로 반환
			"hello".charAt(0) 	=> h
	length()	문자열 길이반환
	indexOf()	특정 문자나 문자열을 앞에서부터 찾아 처음으로  찾게되는 인덱스를 반환
			없을 경우 -1을 반환
	split()		구분문자를 기준으로 문자열을 잘라 배열에 담아 반환
	strip()		문자열 앞뒤의 공백 제거
	substring(start, end) 시작 인덱스 번호 ~ 끝 인덱스 -1까지의 문자열을 반환

5. 컬렉션 프레임워크
1) 자료구조와 알고리즘
- 자료구조
	많은 양의 데이터를 효율적으로 관리(추가, 삭제, 수정, 검색)하고자 데이터를 저장하는 방법
	자바에서는 여러 자료구조 알고리즘을 api로 제공하고 있기 때문에 복잡한 알고리즘을 몰라도 api를 사용해
	자료구조를 구현할 수 있다
	자료구조를 통해 데이터 그룹을 효과적을 ㅗ처리할 수 있도록 지원하는 자바 ApI를 자바 컬렉션 프레임워크라고 한다

- 알고리즘
	어떤 문제가 발생했을 때 해결할 수 있는 절차 혹은 순서

자바 컬렉션 프레임워크(JCF : Java Collection Framework) - 자료구조
	많은 데이터를 쉽고 효과적으로 관리할 수 있는 표준화된 방법을 제공하는 클래스들의 집합
	java.util 패키지에 포함되어 있다

2) 인터페이스 분류	
		인터페이스		특징					구현클래스

	- Collection List:	순서를 유지하고 저장				ArrayList, Vector, LinkedList
				중복값 저장 가능
		     Set: 	순서를 유지하지 않고 정장			HashSet, TreeSet
				중복값 저장 불가능 
	
	Map			키(key)와 값(value)으로 구성된 엔트리 저장	HashMap, Hashtble, TreeMap, Properties
				키는 중복 불가능, 값은 중복 가능


6. List 인터페이스
	데이터의 순서를 보장한다
	중복된 값을 허용한다
		
1) List구현클래스
	Vector : 용량관리, 보안성강화, 처리량 감소 => 지금은 거의 사용되지 않는다
	ArrayList : 배열과 동일하게 인덱스로 데이터를 관리한다
		컬렉션 클래스 중 실무에서 가장 많이 사용되는 클래스이다
		추가, 삭제는 느리지만 탐색이 상대적으로 빠르다
	LinkedList : 추가, 삭제는 빠르지만 탐색이 상대적으로 느리다

2) 제네릭(Generic)
	결정되지 않은 타입을 파라미터로 처리하고 실제 사용할 때 구체적인 타입으로 대체시키는 기능
	
	클래스명 참조변수 = new 생성자();
	클래스명<T> 변수 = new 생성자<T>();
	변수를 선언 할 때 동일한 타입으로 호출하고 싶다면 생성자 호출 시 타입을 명시하지 않고 <>만 붙일 수 있다
	클래스명<T> 참조변수 = new 생성자<>();

	Iterable<T> 자바의 제네릭 프로그래밍을 지원하는 인터페이스 중 하나이다
   	자바 컬렉션 프레임워크에서 많이 사용되며 컬렉션 내부의 요소들을 반복(iterate)하고자할 때 사용한다

   	제네릭을 사용하는 이유
   	(1) 제네릭을 사용하지 않는다면 필드의 타입별로 클래스를 만들어야한다
   	(2) 제네릭 대신 Object 타입을 사용한다면 다운캐스팅을 해야한다
   	(3) 제네릭은 타입을 제한할 수 있다(Object는 모든 타입을 다 받을 수 있기 때문이다)


3) 배열과 ArrayList의 차이
	배열은 길이에 제한을 두어야할 때 자주사용하고
	ArrayList는 몇개의 데이터가 들어올지 알 수 없을 때 사용한다

4) ArrayList 메소드
	int size() : 리스트의 요소 수를 반환
  	boolean isEmpty() : 리스트가 비어 있는지 여부를 확인
   	boolean contains(Object o): 주어진 객체가 리스트에 포함되어 있는지 여부를 확인
   	E get(int index) : 주어진 인덱스 위치에 있는 요소를 반환
  	boolean add(E e) : 리스트에 요소를 추가
  	boolean remove(Object o) : 리스트에서 지정된 객체를 제거
   	void clear() : 리스트의 모든 요소를 제거하여 비웁니다.
	int indexOf(Object o) : 주어진 객체의 첫 번째 등장 인덱스를 반환
   	int lastIndexOf(Object o) : 주어진 객체의 마지막 등장 인덱스를 반환

7. Set : 집합
	데이터의 순서를 보장하지 않는다
	데이터의 중복을 허용하지 않는다
	
1) 구현 클래스
	HashSet
	Ste 인터페이스를 구현한 가장 대표적인 클래스
	중복되는 값을 저장하면 무시한다
	인덱스가 존재하지 않아 순서를 보장하지 않으며 ArrayList나 배열처럼 값을 가져오는 게 불가능하다
	hashCode()가 반환하는 해시코드를 이용하여 데이터를 처리하며 속도가 상대적으로 빠르다
	이런 특징으로 인해 값의 존재여부 파악할 때 사용하기 좋다

2) Iterator: 반복자
	컬렉션에 저장된 데이터를 순회하고 가져오기 위한 인터페이스
	Iterator는 컬렉션에 저장된 데이터들을 컬렉션의 종류와 상관없이 동일한 방식으로 가져오기 위한 인터페이스(타입)
	값을 가져올 때는 커서(cursor)를 이용하여 컬렉션을 순회하며 다음 값을 가리키고 값을 가져올 수 있다
	어떤 자료구저든 Iterator로 변환하면 Iterator만의 방식으로 순서를 만들고 값을 가져올 수 있다

	Set<E> set1 = new HashSet<>();
	Iterator<E> iter = set1.iterator();

- iterator()
   ArrayList, HashSet 등의 컬렉션 객체를 Iterator 타입으로 변환할 때 사용하는 메소드

- hasNext()
   다음 값의 유무를 검사하여 boolean타입으로 반환한다

- next()
   다음값을 가져온다. 아무 값도 없다면 예외가 발생한다


8. Map
	데이터의 순서를 보장하지 않는다
	데이터를 Key 와 Value 한쌍으로 저장하여 Key로 데이터에 접근 할 수 있다
	key는 ArrayList의 index와 비슷한 역할을 하며 중복을 허용하지 않는다(index에 중복이 없는 것과 동일함)

1) 구현클래스 
	HashMap
	hashCode()가 반환하는 해시코드를 이용하며 검색속도가 상대적으로 빠르다
	이미 정장된 key를 가진 한 쌍의 데이터를 넣으면 가장 마지막에 넣은 value로 수정된다(value는 수정 가능)
	저장되지 않은 key를 가진 한쌍의 데이터를 넣으면 새롭게 추가가 된다
