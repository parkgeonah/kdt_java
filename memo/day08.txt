day08(java 6일차)

복습 -> 이중 for문 -> 배열 -> 이차원 배열 -> 메소드

0.복습
1) 제어문
	조건문 	if문 switch문
	반복문	for문 while문 do~while문
	기타제어문	berak문 continue문\

2) if문
	if(조건식){
		조건식이 true일 때 실행할 문장;
	}else if(조건식2){
		조건식1이 false고 조건식2가 true일 때 실행할 문장;
	}else{
		조건식1과 조건식2가 모두 false일 때 실행할 문장;
	}

3) switch문
	switch(변수){
	case 값1:
		값1과 같을 때 실행 문장
		break;
	case 값2:
		값2와 같을 때 실행 문장
		break;
	case 값3:
		값3과 같을 때 실행 문장
		break;
	default:
		위의 값들과 일치하지 않을 때 실행할 문장;
		break;
	}

4) for문
	반복횟수가 정해져있을 때
	for(초기값; 조건식; 증감식){
		반복실행할 문장;
	}

5) while문
	조건을 만족하는 경우 반복
	//조건식 비교대상변수
	while(조건식){
		반복실행할 문장;
	}

6) do ~ while문
	조건과 상관없이 무조건 1번은 실행, 그 이후 조건을 만족하는 겨우 반복
	do{
		반복실행할 문장;
	}while(조건식);

7) break문
	반복문/조건문 즉시 탈출

8) continue문
	반복문의 다음 반복으로 건너 뜀


- 삼항연산자: 값을 저장하거나 출력할 때 / 조건이 1개일 때
- if문: 논리연산자가 사용되거나 조건이 2개 이상일때
- switch문: 하나의 변수에 여러값이 들어갈 수 있을 때
-------------------------------------------------------

1. 이중 for문
	하나의 for문은 하나의 for문 안에 또 다른 for문이 들어있는 구조
	반복적인 작업을 가로(행), 세로(열)로 수행할 때 사용한다

	for(초기식1; 조건식1; 증감식1){ // 바깥for문
		
		for(초기식2; 조건식2; 증감식2){ // 안쪽 for문
			반복실행할 문장; // 이 부분에는 반드시 코드가 작성되어야 한다.
		}
		
	}

1) 동작원리
	바깥 for문이 한 번 실행되면
	안쪽 for문은 조건이 false가 될 때까지 계속반복
	안쪽 for문이 끝나면 바깥 for문이 다시 한 번 반복되고
	그 때 마다 안쪽 for문 다시 처음부터 시작

※ 구구단 만들기

2. 배열(Array)
	저장공간의 나열
	변수 => 하나의 타입으로 하나의 값만 저장할 수 있는 저장공간

1) 배열을 사용하는 이유
	변수를 여러개 선언하면 이름도 여러개 생긴다 => 각 저장공간을 관리하기 불편하다
	n칸 배열을 선언하면 저장공간이 여러개 생기고 이름은 한 개 생긴다 => 관리하기 편하다
	규칙성이 없는 값에 규칙성을 부여하기 위해서(index)
	
	변수 [] 		하나의 타입으로 된 하나의 값만 저장할 수 있는 공간
	배열[][][]	하나의 타입으로 된 여러 값을 저장할 수 있는 저장공간의 나열

2) 배열의 선언
	변수 선언 	자료형 변수명 = 값;

- 배열변수를 선언 후 배열을 생성
  어떤값을 넣을지 모르나 몇 칸 만들지는 알 때 사용

	자료형[] 배열이름 = new 자료형[배열크기];
	ex) int[] ar1 = new int[5]; // 어떤 값을 넣을지 모르지만 5칸짜리 배열

- 배열 변수 선언과 함께 초기값 할당
  어떤 값을 넣을 지 알 때 사용
	
	자료형[] 배열명 = {값1, 값2, 값3, 값4};
	ex) int ar2 = {10, 50, 63, 87};

- 배열을 생성하지 않고 배열 변수를 초기화
  어떤 값을 넣을지도 모르고, 몇 칸짜리로 만들어야할지도 모를 때

	자료형[] 배열명 = null;
	ex) int[] ar3 = null;

- 배열 변수에 배열 생성과 초기화
	
	배열명 = new 자료형[]{값1, 값2, 값3};
	ex ar3 = new int[]{1, 2, 3};
  
3) new
	Heap메모리에 할당(저장)
	저장공간의 시작주소를 가져온다

  null 주소의 초기값(어떤 주소가 들어갈 지 모를 때 사용)

  자바에서 배열은 항상 Haep(동적 메모리)에 할당되기 때문에 메모리 상에서 동적배열만 존재한다


+) Runtime Data Area: JVM이 프로그램을 실행하는 동안 사용하는 메모리 영역
	JVM의 메모리 영역은 OS(운영체제)에게 할당 받은 메모리다
	운영체제로부터 할당 받은 메모리 공간 내에서 독자적으로 메모리를 관리하고 이를 여러 영역으로 나누어 사용한다
	따라서 JVM의 메모리 영역은 운영체제의 메모리 영역과는 분리되어 동작된다
	크게 5개의 영역으로 구분되며 힙영역, 스택영역, 메소드영역, 프로그램 카운터 레지스터, 네이티브 메소드 스택

- 힙영역(Heap Area)
	객체와 배열이 생성되는 메모리 공간
	new 연산자로 생성되는 객체나 배열이 할당
	동적 메모리 할당을 사용하기 때문에 프로그램이 실행중에 메모리의 크기를 동적으로 조정할 수 있다

- 스택영역(Stack Area)
	메소드 호출(사용) 시에 사용하는 메모리 공간
	메소드가 호출 될 때마다 스택에 새로운 프레임이 생성되며 메소드 종료시에는 해당 프레임이 제거된다
	각 쓰레드마다 별도의 스택 영역을 가지며 동시에 여러 메소드가 호출될 수 있다

- 메소드영역(Method Area)
	클래스의 정보, ctatic 변수, 상수 등이 저장되는 메모리 공간
	메소드 영역 JVM이 시작될 때 생성되며, 모든 쓰레드가 공유한다

- 프로그램 카운터 레지스터(PC Register)
	프로그램 카운터 레지스터는 현재 실행중인 명령어의 주소를 저장하는 메모리 공간
	JVM이 쓰레드를 생성할 때마다 쓰래드마다 별도의 PC Register를 가진다

- 네이티브 메소드 스택(Native Method Stack)
	JNI(Java Native Interface)를 사용하여 호출되는 C/C++ 메소드의 스택영역이다


4) 배열의 구조

	int[] ar       =       		new int[]{7, 9, 1, 2, 4};
   	--------            대입 연산자   -------------------------   
   	stack 메모리         		  heap 메모리에 저장된 시작 주소값
   	정수형배열 ar 참조변수      	  5칸짜리 정수형 배열을 만들고 값이 저장되어있다

   	ar이라는 이름의 변수는 배열 객체의 주소값을 가리키는 참조변수이다
   	배열 객체는 Heap 영역에 할당되며, 배열 객체 안에는 여러개의 값이 담길 수 있다
   	따라서 ar 변수는 배열 객체의 주소값을 가리키고 해당 배열 객체 안에 여러 값을 가질 수 있다

  
  	[Stack]		[Heap]
	========	=======
	|_ar_|    ->	|__[8][2][1]__|
	
	참조변수		배열객체

5) Index
	배열을 생성할 때 각각의 저장공간에 자동으로 붙여지는 번호
	0부터 순차적으로 증가하면서 부여된다
	배열의 이름이 한개이기 때문에 이름만으로는 배열의 여러 저장공간에 접근할 수 없다
	그렇기 때문에 index를 이용하여 각가의 저장공간에 접근한다
	참조변수[index]으로 사용하고 참조변수[index]는 하나의 저장공간이기 때문에 변수처럼 사용한다

6) length
	배열을 생성할 때 자동으로 생성되는 저장공간의 수(배열의 길이)
	배열의 길이는 한 번 만들어지면 변동될 수 없으므로 length는 상수라고 볼 수 있다
 	참조변수.length로 사용한다
		


7) 배열의 사용
	배열명[index]
	int ar = {5, 2, 1, 8};
	syso(ar); 	//배열의 시작주소값(참조값)

-------------------------------------------------------
※ twoForTest 패키지에 Gugudan01, Gugudan02, Gugudan03, Gugudan04 클래스 만들고
   2단 ~ 9단까지 구구단 만들어서 출력하기

//로직구성
바깥for문 초기식, 조건식, 증감식
안쪽for문 초기식, 조건식, 증감식
각 중괄호 영역 안에서의 출력문이 어떻게 될지 작성

1) 단별로 세로로 출력하기 Gugudan01
2단
2 x 1 = 2
2 x 2 = 4
...
2 x 9 = 18

3단
3 x 1 = 3
3 x 2 = 6
...
3 x 9 = 27

...

9단
9 x 1 = 9
...
9 x 9 = 81

2) 단별로 가로로 출력하기 Gugudan02
2단      3단      4단      5단      6단      7단      8단      9단
2 x 1 = 2   3 x 1 = 3   4 x 1 = 4   5 x 1 = 5   6 x 1 = 6   7 x 1 = 7   8 x 1 = 8   9 x 1 = 9
2 x 2 = 4   3 x 2 = 6   4 x 2 = 8   5 x 2 = 10   6 x 2 = 12   7 x 2 = 14   8 x 2 = 16   9 x 2 = 18
...
2 x 9 = 18   3 x 9 = 27   4 x 9 = 36   5 x 9 = 45   6 x 9 = 54   7 x 9 = 63   8 x 9 = 72   9 x 9 = 81


3) 3단씩 출력하기 Gugudan03
//?
for(){
   //단제목 출력
   for(){
   }

   //곱셈계산결과
   for(){
      for(){
      }
   }
}

1단      2단      3단      
1 x 1 = 1   2 x 1 = 2   3 x 1 = 3   
1 x 2 = 2   2 x 2 = 4   3 x 2 = 6   
1 x 3 = 3   2 x 3 = 6   3 x 3 = 9   
1 x 4 = 4   2 x 4 = 8   3 x 4 = 12   
1 x 5 = 5   2 x 5 = 10   3 x 5 = 15   
1 x 6 = 6   2 x 6 = 12   3 x 6 = 18   
1 x 7 = 7   2 x 7 = 14   3 x 7 = 21   
1 x 8 = 8   2 x 8 = 16   3 x 8 = 24   
1 x 9 = 9   2 x 9 = 18   3 x 9 = 27   

4단      5단      6단      
4 x 1 = 4   5 x 1 = 5   6 x 1 = 6   
4 x 2 = 8   5 x 2 = 10   6 x 2 = 12   
4 x 3 = 12   5 x 3 = 15   6 x 3 = 18   
4 x 4 = 16   5 x 4 = 20   6 x 4 = 24   
4 x 5 = 20   5 x 5 = 25   6 x 5 = 30   
4 x 6 = 24   5 x 6 = 30   6 x 6 = 36   
4 x 7 = 28   5 x 7 = 35   6 x 7 = 42   
4 x 8 = 32   5 x 8 = 40   6 x 8 = 48   
4 x 9 = 36   5 x 9 = 45   6 x 9 = 54   

7단      8단      9단      
7 x 1 = 7   8 x 1 = 8   9 x 1 = 9   
7 x 2 = 14   8 x 2 = 16   9 x 2 = 18   
7 x 3 = 21   8 x 3 = 24   9 x 3 = 27   
7 x 4 = 28   8 x 4 = 32   9 x 4 = 36   
7 x 5 = 35   8 x 5 = 40   9 x 5 = 45   
7 x 6 = 42   8 x 6 = 48   9 x 6 = 54   
7 x 7 = 49   8 x 7 = 56   9 x 7 = 63   
7 x 8 = 56   8 x 8 = 64   9 x 8 = 72   
7 x 9 = 63   8 x 9 = 72   9 x 9 = 81   


4) while문만 이용 구구단 출력(단별로 가로로 출력하기)
2단      3단      4단      5단      6단      7단      8단      9단
2 x 1 = 2   3 x 1 = 3   4 x 1 = 4   5 x 1 = 5   6 x 1 = 6   7 x 1 = 7   8 x 1 = 8   9 x 1 = 9
2 x 2 = 4   3 x 2 = 6   4 x 2 = 8   5 x 2 = 10   6 x 2 = 12   7 x 2 = 14   8 x 2 = 16   9 x 2 = 18
...
2 x 9 = 18   3 x 9 = 27   4 x 9 = 36   5 x 9 = 45   6 x 9 = 54   7 x 9 = 63   8 x 9 = 72   9 x 9 = 81


5) 배열복습문제
배열 복습문제
- 배열에 값을 담아주는 반복문, 출력하는 반복문 따로 작성하기
- 로직구성 먼저!

// 패키지 : homework08
// 클래스 : ArrayTask01
1. 100~1까지의 값을 배열에 넣고 출력

// 클래스 : ArrayTask02
2. 1~10까지의 값을 배열에 넣고 총 합을 출력

// 클래스 : ArrayTask03
3. 3명의 수학점수를 사용자에게 입력받아 배열에 저장하고 평균 점수를 출력

// 클래스 : ArrayTask04
4. 0 1 2 3 0 1 2 3 배열에 담고 출력

// 클래스 : ArrayTask05
5. A ~ F까지를 배열에 값을 넣고 출력

// 클래스 : ArrayTask06
6. A ~ F까지 중 C만 제외하고 배열에 담아 출력

// 클래스 : ArrayTask07
7. aBcDeFgHiJkLmNoPqRsTuVwXyZ 배열에 담고 출력

// 클래스 : ArrayTask08
8. 5개의 정수를 입력받은 뒤 그 값을 배열에 담고 최대값과 최소값 출력
