day14(java 12일차)
복습 -> 상속 -> super, super() -> 다형성 -> 접근제한자 

0. 복습
1) 클래스
	class 클래스명{
		// 필드(인스턴스 변수, 스태틱 변수, 상수)
		// 메소드(인스턴스 메소드, 스태틱 메소드)
		// 생성자(기본생성자, 매개변수 있는 생성자)

	}

2) 생성자
	public 클래스명(){}
		
	pubilc 클래스명(자료형 매개변수){
		this.필드명 = 매개변수;
		
	}

3) this, this()
	this: 객체 자기 자신(참조값)
	this(): 자기자신의 생성자, 생성자 내에서 가장 최상단에 작성

4) 필드와 지역변수의 차이
	지역변수는 메소드, 생성자 블록에서 선언되고 메소드와 생성자 호출시에만 생성 되고 사용된다
	필드는 클래스 블록에서 선언되고 객체 내부에서 존재하고 객체 내부, 외부에서 사용가능하다

	구분 		필드			지역변수
	선언위치		클래스 선언 블록		생성자, 메소드 선언 블록
	존재위치		객체 내부에서 존재		생성자, 메소드 호출 시에만 존재
	사용위치		객체 내,외부 어디든사용	생성자, 메소드 블록 내부에서만 사용

5) 메소드
- 메소드 정의
	리턴타입 메소드명(자료형 매개변수){
		// 구현부
		 실행문장;
		return 리턴값;
	}	

- 메소드 호출
   매개변수 리턴값   호출방식
   x   x   객체명.메소드명();
   o   x   객체명.메소드명(인수);
   x   o   syso(객체명.메소드명());   or 리턴타입과같은자료형 변수 = 객체명.메소드명();
   o   o   syso(객체명.메소드명(인수)); or 리턴타입과같은자료형 변수 = 객체명.메소드명(인수)

- 가변길이 매개변수
   리턴타입 메소드명(자료형 ... 매개변수명){
      실행할문장;
      return 리턴값;
   }

   메소드호출 : 매개변수의 인수값을 쉼표로 구분해서 개수와 상관없이 사용가능함
   
6) 메모리
   stack 영역   매개변수, 지역변수, 메소드 실행정보가 저장되는 영역
   heap 영역   new 키워드로 생성된 객체와 그 객체의 인스턴스 변수가 저장되는 영역
         (객체마다 별도의 공간을 가짐)
   method 영역   모든 클래스와 static 멤버가 저장되는 영역
  프로그램 실행동안 유지되며 모든 객체가 공유한다

7) 정적블록
   static {

   }

   클래스가 로드될 때 실행되는 블록
   모든 인스턴스가 생성되기 전에 실행되므로 초기화 작업에 유용하다
   주로 정적 멤버를 초기화하는 데 사용된다

8) 변수의 종류
	지역변수 :		메소드, 생성자 등 중괄호 내부에서 선언, stack 영역에 저장
			사용 전  반드시 초기화 필요, 메소드 실행 중에만 유효

	매개변수 : 	메소드, 생성자 소괄호 내부에 선언, stack 영역에 저장
			메소드 호출 시 전달되는 값 저장, 기본적으로 call by value방식

	인스턴스 변수: 	클래스 내부, 메소드 외부에서 선언, heap 영역에 저장
			객체마다 별도로 존재, JVM이 자동으로 초기화
	
	정적변수 : 	클래스 내부, static 키워드 사용하여 선언, method 영역에 저장
			공유 변수, 클래스 단위로 관리, 객체 없이 사용 가능

9) enum 열거형
	상수들의 집합을 정의하는 자료형
	클래스처럼 동작하며 고정된 값들을 명확하게 표현
	method 영역에 저장(클래스처럼 동작함)
	public static final 속석을 가짐
	필드, 생성자, 메소드 정의 가능함
	생성자의 접근 제한자는 private

------------------------------------------------------------------------------
1. 상속(inheritance)
	기존 클래스의 맴버(필드, 메소드)를 재사용하고 필요한 기능만 추가하여 새로운 클래스를 만드는 방식
	여러 클래스 선언 시 맴버가 겹치는 경우, 부모클래스를 먼저 선언하고 공통 멤버를 자식 클래스들에게
	상속해주는 개념

1) 상속문법
	class Parents{
		// Parents 클래스의 멤버
	}

	class Child extends Parents{
		// Child 클래스의 멤버
		// Parents 클래스의 멤버
	}

	
	Parents: 부모클래스, 슈퍼클래스, 기반클래스, 상위클래스
	Child: 자식클래스, 서브클래스, 파생클래스, 하위클래스

	※ 자바에서 상속은 단일 상속만 지원한다
	
2) 상속을 사용하는 이유
	공통된 멤버를 부모 클래스에 두고 자식 클래스에서 재사용하기 위해
	Tv -> 최신 tv -> 스마트  tv
	person -> student, employee, proferssor	

	중복 코드 제거, 유지보수성 향상, 객체 지향적 설계 가능

2. super, super();
	this: 객체 자기자신(참조값)
	this(): 자기자신의 생성자

- super: 부모의 참조값
	부모의 맴버에 접근할 때 사용한다
	
- super(): 부모 생성자
	자식클래스 타입의 객체로 부모 필드에 접근할 수 잇따
	우리는 객체를 만들 때 자식 생성자만 호출하기 때문에 자식 필드만 메모리에 할당된다고 생각할 수 있다
	ex) Child c = new Child();
	자식생성자는 항상 부모 생성자를 호출한다
	이는 자식의 필드를 초기화 할 때 부모 필드도 초기화하는 것을 의미한다
	즉, 자식 객체를 생성하게 되면 부모 객체도 같이 생성되게 된다(부모객체가 먼저 생성된다)
	부모 생성자를 호출하는 방법은 super()를 사용하게 된다
	만약, super()를 작성하지 않더라도 컴파일러가 자동으로 작성해준다


+) this, this(), super, super()
this 	현재 객체 참조(참조값)
	지역변수와 멤버 변수의 이름이 겹칠 때 구분하기 위해 사용, 현재 객체 자신을 가리킬 때 사용

this() 	같은 클래스의 다른 생성자를 호출
	생성자 코드 중복을 줄이기 위해 사용
	반드시 생성자 첫 줄에 위치
	
super 	부모클래스 참조
	부모클래스의 필드/ 메소드에 접근할 때 사용, 오버라이딩 된 메소드를 부모 메소드로 호출할 때 사용

super() 자식 클래스 생성 시 부모 생성자 먼저 호출 필요할 때 사용
  	생략 시 기본적으로 super()가 자동으로 삽입됨
   	반드시 생성자 첫 줄에 위치


3. 다형성(polymorphism)
	하나의 것으로 여러 형태를 가진다

1) 오버로딩(생성자, 메소드)
	같은 클래스 내에서 생성자 또는 메소드를 같은 이름으로 매개변수의 타입, 개수, 순서만 다르게 만든다
	반환타입은 오버로딩에 영향을 주지 않는다

2) 오버라이딩(메소드)
	상속관계를 맺은 자식 클래스에서 부모 클래스의 메소드를 재정의 한다
	반환타입, 메소드명, 자료형 매개변수 모두 동일해야한다
	{} 구현부의 내용만 다르게 정의한다

+) 오버로딩과 오버라이딩의 차이
특징		오버로딩					오버라이딩
정의 위치		같은 클래스 내에서 동일한 이름의 메소드		부모 클래스에 정의된 메소드 재정의(자식 클래스)
메소드선언부	이름만 같고 매개변수 타입/개수/순서가 다름		부모클래스에 정의된 메소드 선언부와 완전히 일치해야함
관계		상속관계 필요없다				상속관계가 필수
사용목적		메소드의 다중 정의				동작 변경(구현부 재정의)

3) 오버라이딩을 사용하는 목적
	다형성 구현	부모클래스의 참조 변수로 자식클래스의 객체를 다룰 수 있게 하기 위함(내일 배울 예정)
	동작 변경		부모클래스의 기본동작을 자식 클래스의 요구사항에 맞게 변경
	유지보수성 향상	공통 기능을 부모클래스에서 정의하고 필요한 부분만 자식 클래스에서 변경

---------------------------------------------------------------------------
gameTask
Character 클래스
   슈퍼클래스 기반으로 자식 클래스 생성 후 아래 코드 완성하여 객체 생성 후 메소드 호출하기

서브클래스
1) Wizard 클래스
   Character 클래스 상속
   기본 생성자를 통해 마법사, 15, 30, 1, 30, 0 전달
   normalAttack() 오버라이딩 : 체력 2 감소 후 공격 실행
   skillAttack() 오버라이딩 : mp가 부족하면 출력 후 실패
   specialAttack() 오버라이딩 : 마법사는 특수공격이 없습니다 출력

2) Warrior 클래스
   Character 클래스 상속
   기본 생성자를 통해 전사, 30, 10, 5, 15, 100 전달
   skillAttack() 오버라이딩 : mp가 3보다 부족하면 실패, 아니면 mp 3소모
   specialAttack() 오버라이딩 : 피해 출력 + 체력 10 감소 + 부활 검사
   onlyWarrior() 메소드 : 전사만 사용할 수 있는 고유 행동입니다 출력

3) Rogue 클래스
   Character 클래스 상속
   기본 생성자를 통해 로그, 20, 20, 3, 20, 0 전달
   normalAttack() 오버라이딩 : mp3 소모, 부족하면 실패
   skillAttack() 오버라이딩 : mp 2 소모 + hp 5 소모, 부족하면 실패
   specialAttack() 오버라이딩 : 20~100사이의 무작위 피해량 출력(Random 사용)
   정수형 배열 필드 이용

Main 클래스 => 메인 메소드
   사용자에게 캐릭터를 선택하게 하고 1. 마법사, 2. 전사, 3. 로그
   선택한 캐립터로 반복적으로 메뉴 실행
   1. 기본공격, 2. 스킬공격, 3. 특수공격, 4. 종료

----------------------------------------------------------------------------------
4. 접근 제한자(접근권한 제어자, 접근자) Access Modifier
	클래스, 필드, 생성자, 메소드에 붙여서 누가 접근할 수 있는지를 제한하는 키워드

	접근제한자		사용가능한 대상			접근허용범위
	public		클래스, 생성자, 필드, 메소드		어디서든 접근 허용
	protected 	필드, 메소드			같은 패키지 + 자식클래스(다른 패키지라도)
	(default)	클래스, 생성자, 필드, 메소드		같은 패키지 안에서만 접근 가능
	private		생성자, 필드, 메소드			같은 클래스 안에서만 접근 가능

제한자		같은 클래스	같은 패키지	다른패키지(상속관계x)		다른 패키지(상속관계o)
public		o		o		o			o
protected	o		o		x			x
(default)	o		o		x			x
private		o		x		x			x

1) public
	클래스, 필드, 메소드, 생성자 사용가능
	모든 곳에서 접근 가능
	ex) 공용 API 메소드, 유틸리티 메소드, 대표 클래스 등

2) protected
	필드, 메소드, 생성자 사용가능
	클래스 자체의 접근제어자는 public과 default만 사용가능하고 protected는 상속관계에서 
	접근을 제어하는 기능을 제공하고 있으므로 클래스 자체에는 의미가 없다

3) (default)
	주로 패키지 내부에서만 사용할 클래스, 메소드에 사용
	같은 패키지에서만 접근 가능
	다른 패키지에서는 상속관계와 상관없이 접근 불가
	
4) private
	같은 클래스 내부에서만 접근 가능
	외부 클래스는 접근 할 수 없고 getter/setter 메소드를 통해 간접적으로 접근 허용
	캡슐화를 위해 주로 사용

----------------------------------------------------------------------------------------
java 복습

1. 변수 
	하나의 값을 하나의 타입으로 저장하는 저장공간
	자료형 변수명 = 값;

2. 변수의 종류
	매개변수: stack영역 메소드(생성자) 선언부에서 소괄호 안에 쓰는, 메소드(생성자) 중괄호 안에서

	지역변수:	stack영역 메소드(생성자) 구현부에서 사용하는 변수, 메소드 호출시점부터 종료까지 사용가능
		객체 생성할 때부터 객체가 사용되지 않을 때 까지 사용가능

	인스턴스변수: heap 영역, 클래스 중괄호 영역 안에서 사용하는 변수 / 객체명.변수명

	스태틱변수: method 영역, 프로그램 시작부터 끝까지 사용가능 / 클래스명.변수명

3. 자료형
기본자료형
	byte, short, int, long, double, float, boolean, char

reference 자료형
	Stirng, enum, 클래스명

4. 제어문
	조건문	if문, switch문
	반복문	for문, for-each문, while문, do~while문
	기타제어문	break문, continue문


5. 배열
	저장공간의 나열
1차원 배열
	자료형[] 배열명 = new 자료형[칸수];
	자료형[] 배열명 = {값1, 값2, ...};
	자료형[] 배열명 = new 자료형[]{값1, 값2, ...}  
	자료형[] 배열명 = null;

길이 	배열명.length;

2차원 배열
	자료형[][] 배열명 = new 자료형[행][열];
	자료형[][] 배열명 = {{값1, 값2, 값3},{값1, 값2, 값3}};
	자료형[][] 배열명 = null;

행의 길이 	배열명.length;
열의 길이	배열명[index].length;

6. 메소드
- 메소드 선언(정의)은 메소드 중괄호 영역 밖에서, 메소드 호출(사용)은 메소드 중괄호 영역 안에서 한다!!

1) 메소드 정의
- 인스턴스 메소드 정의
	접근제한자 리턴타입 메소드명(자료형 매개변수){
		// 실행할문장;
		return 리턴값;
	}
	객체명.메소드명();


- 스태틱 메소드 정의
접근제한자 static 리턴타입 메소드명(자료형 매개변수){
		// 실행할문장;
		return 리턴값;
	}
	클래스명.메소드명();

2) 메소드 호출방법 4가지
	매개변수	리턴값	호출방법
	X	X	객체명.메소드명();
	O	X	객체명.메소드명(인수);
	X	O	Syso(객체명.메소드명());	or 리턴값의자료형 변수명 = 객체명.메소드명();
	o	o	syso(객체명.메소드명(인수)); or 리턴값의 자료형 변수명 = 객체명.메소드명(인수);
	
			클래스명.메소드명();


7. 클래스
1) 클래스 특징
	사용자 정의 자료형이다
	연관성있는 데이터와 기능을 한 곳에 통합
	객체 생성의 틀
	
2) 클래스 정의
	접근제한자 class 클래스명{
		//필드	=> 인스턴변수, 스태틱변수, 상수
		//메소드	=> 인스턴스 메소드, 스태틱 메소드
		//생성자 
		public 클래스명(){
			super();
		}	// 기본생성자

		public 클래스명(int num){
			this(num, 10);	
		}
		
		public 클래스명(int num1, int num2){
			super();
			this.num1 = num1;
			this.num2 = num2;
		}
		

	}

3) 객체화 (인스턴스화)
	클래스타입 참조변수 = 	new 생성자();
	==============		================
	stack			heap
	

4) this, this()
	this : 객체 자기자신(참조값)
	this() : 객체 자기자신의 다른 생성자

8. 상속
	기존에 선언된 클래스의 멤버를 새롭게 만든 클래스에서 사용하고 싶을 때 상속을 받고 새로운 기능만 추가한다
	단일 상속만 가능하다
	유지보수, 코드의 재사용성, 확장성

1) 상속 문법	
	class 슈퍼 클래스{
		//필드
		//메소드(오버로딩)
		//생성자(오버로딩)
		puplic 슈퍼클래스(int number){
		super();
		this.number = number;
	}

	class 서브클래스 extends 슈퍼클래스{
		// 슈퍼클래스의 필드와 메소드
		// 서브클래스의 필드
		// 서브클래스 메소드(오버라이딩, 오버로딩)
		// 서브클래스의 생성자(오버로딩)
		public 서브클래스(){
			super(값);
		}
	}


2) super, super();
	super : 부모의 참조값
	super() : 부모의 생성자


9. enum 열거형
	고정된 값(상수)들을 나타내기 위한 특별한 데이터 유형 
	클래스 타입(reference Type)으로 취급된다

1) enum을 사용하는 이유
	코드의 가독성과 안정성
	컴파일 타임의 오류 방지
	관련 데이터와 동작을 묶을 수 있음

2) enum 문법
	enum enum명{ 		// enum명은 첫 문자를 대문자로 작성!!
		// 상수
		// 필드
		// 생성자 접근제한자 private
		// 메소드	
	}

10. 다형성 특징
	오버로딩	: 같은 메소드명으로 매개변수 순서,타입,개수로 다르게 정의한것
	오버라이딩 : 같은 메소드명 매개변수 순서 타입 개수가 다 동일하게 재정의 상속관계에서만 가능


11. 접근 제한자
	
	public
	protected
	(default)
	private