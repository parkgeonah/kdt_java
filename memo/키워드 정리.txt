변수 : 하나의 타입에 하나의 값을 저장하는 저장공간
자료형: byte, short, int, long, double, boolean, char, String
참조 자료형: String
형변환: 자동형변환, 강제형변환
자동형변환 : 크기가 작은 자료형에서 큰자료형으로 형변환
강제형변환: (자료형)(값), 크기가 큰 자료형에서 작은 자료형으로 형변환
데이터 입력: Scanner클래스 사용자가 직접 값을 입력

연산자 
최우선 연산자: (), .
단항 연산자: +, -, ++, --, !,
산술 연산자: +, -, *, /, %
쉬프트연산자: >>, <<, 
관계연산자: >, <, ==, >=, <=
논리연산자: !=, &&, ||
삼항연산자 : 조건식 ? true일 때 실행 : false일 때 실행;
대입연산자 : =

제어문
제어문 종류: 조건문, 반복문, 기타제어문
조건문: if문 , if~else문, if else~if, switch문 
- if문: 	조건문이 true일 때 실행 if(조건식){ 실행할 문장; }

- else if: 	조건식1이 false이고, 조건식2가 true면 실행

- else: 	조건식이 모두 false일 때 실행

- switch문: 조건식의 값이 일치할 때 실행

반복문: for문, 다중for문, for-each문, while문, do while문
- for문: 	 조건식이 false일 때 까지 반복 for(초기식; 조건식; 증감식){실행할문장;} 
	
- 다중 for문: for문안에 for문이 들어감

- while문: 조건식이 true일 동안 반복하는 반복문, whlie문은 비교할 대상을 선언해주어야 조건식을 벗어날 수 있다.

- do while문: 무조건 1번은 실행하는 반복문	

기타 제어문: break문, continue문
break문 반복문 안에있으면 break를 만나면 반복문 즉시 탈출

continue문 continue를 만나면 밑에 문장 실행 x

배열 : 하나의 타입에 여러값을 저장할 수 있는 저장공간
배열의 선언: 
- 크기를 알때 : 	자료형[] 변수명 = new 자료명[크기];

- 값을 넣어선언할 때: 자료형[] 변수명 = {값1,값2};

- 크기도 모르고 값을 모를 때: 자료형[] 변수명 = null;

2차원 배열: 2차원배열은  행과 열로 나뉜다
자료형[][] 변수명 = new 자료형[행][열];
자료형[][] 변수명 = {{값1, 값2}, {값1, 값2}};

클래스 : 자바의 모든 프로그램은 클래스파일이다, 클래스의 멤버는 필드, 메소드, 생성자
접근제한자 class 클래스명{
	//필드
	//메소드
	//생성자
}

상속: 부모클래스의 있는 멤버를 자식클래스에서 사용가능하다 자바에서는 단일상속만 지원한다 extends키워드를 사용

- 객체 지향 프로그래밍: 다형성, 캡슐화, 상속, 추상화

- 클래스 멤버에는 정적멤버, 인스턴스 멤버가 존재

- 정적멤버: method영역에 올라감

- 인스턴스멤버: heap영역

메소드
- 하나의 기능을하는 코드블록
- 인스턴스 메소드와 스태틱메소드가 존재
- 다형성을 통해 메소드 오버로딩, 오버라이딩 가능
getter 메소드, setter메소드
- getter메소드 
필드에 priveat 객체를 반환 해주는 메소드 리턴타입이 존재한다 선언할때는 필드리턴타입 get필드명으로 선언
- setter메소드
필드에 priveat 객체에 값을 전달해주는 메소드 선언할 때 set필드명으로 선언 매개변수가 존재한다

생성자
사용자가 생성자를 선언하지 않으면 자바 컴파일러가 자동으로 기본생성자를 선언한다
생성자도 오버로딩 가능

-this: 객체 자기자신(참조값)
- this(): 자기자신의 생성자
- super: 부모의 참조값
- super(): 부모의 생성자
		
오버로딩: 같은메소드명으로 매개변수의 순서, 타입, 개수로 재정의하는 것 리턴타입 상관 x 다형성의 특징중 하나
오버라이딩: 상속관계에서 같은리턴타입 같은메소드명 매개변수까지 동일해야함 부모클래스의 메소드를 재정의한다

접근제한자
public: 어디에서든 접근이 가능하다
protected: 같은패키지 내 접근가능 상속관계에서는 다른패키지 접근가능
(default): 같은패키지 내에서만 접근가능
private: 같은 클래스 내에서만 접근가능

클래스에서의 타입변환
업캐스팅 : 상속관계에서 자식클래스를 부모클래스에 업캐스팅가능 하지만 자식객체에는 접근이 불가
다운캐스팅: 상속관계에서 부모클래스에서 자식클래스로 다운캐스팅 업캐스팅을 해야 다운캐스팅 가능

다형성: 하나의 이름으로 여러가지를 할 수 있는것 
참조변수의 다형성, 오버로딩, 오버라이딩

instanceof : 클래스타입을 비교하는 키워드이다


추상클래스: 추상메소드가 하나 이상이라도 존재하면 추상클래스 abstract가 붙어있다 추상클래스의 메소드를 구현하기 위해서는 자식클래스에서 메소드 오버라이딩을 해야한다.

인터페이스: 상수와 추상메소드만 존재한다 (jdk8버전에서 인터페이스에 default메소드와 static메소드를 선언할 수 있게 되었다, jdk9버전부터 private메소드도 선언가능) 인터페이스는 다중구현이 가능하다 implements 키워드를 사용한다

내부클래스: 하나의 클래스안에 다른클래스 선언 가능 부모클래스의 객체화가 이루어지지않으면 내부클래스를 객체화 시킬 수 없다

익명클래스: 인터페이스나 추상클래스를 1회성으로 사용하기 위해 사용 이름이 없는 클래스이다. 주소값을 출력하면 $숫자가 나온다

예외처리: 예외에는 크게 두가지가 있다 error과 exception이 있다 error은 개발자가 예측하거나 처리할 수 없다

Exception은 checked 와 unchecked로 나뉜다
checked예외는 자바컴파일러 오류로 코드블록을 작성하면서 확인할 수 있다
unchcked예외는 RuntimeException으로 코드블록을 작성할 때는 확인할 수 없고 코드를 실행해야 알 수 있다

예외처리 try catch구문
예상가능한 코드블록을 try catch를 이용해 예외처리를 할 수 있다
try{
 	예외발생이예상되는문장;
}catch(예외클래스명 e){
	예외처리할 코드;
}

finally는 무조건 출력이 된다

대표적인 예외로는
NullPointerException
IndexOutOfBoundException
NumberFormatExceprion이 존재한다



